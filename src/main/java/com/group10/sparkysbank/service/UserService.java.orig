<<<<<<< HEAD
package com.group10.sparkysbank.service;

import java.util.LinkedHashSet;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.group10.sparkysbank.dao.UserInfoDAO;
import com.group10.sparkysbank.model.Pwdrecovery;
import com.group10.sparkysbank.model.Roles;
import com.group10.sparkysbank.model.UserRoles;
import com.group10.sparkysbank.model.Useraccounts;
import com.group10.sparkysbank.model.Userinfo;

@Service("userService")
public class UserService {

	@Autowired
	UserInfoDAO userInfoDAO;
	@Transactional
	public int addNewExternalUuser(Userinfo userInfo,String que1,String que2,String ans1,String ans2)
	{
		
		Useraccounts account=new Useraccounts();
		account.setBalance(500.0);
		account.setUsername(userInfo.getUsername());
		
		Pwdrecovery pwdRecoveryQuestion=new Pwdrecovery();
		pwdRecoveryQuestion.setAns1(ans1);
		pwdRecoveryQuestion.setAns2(ans2);
		pwdRecoveryQuestion.setQuestion1(que1);
		pwdRecoveryQuestion.setQuestion2(que2);
		pwdRecoveryQuestion.setUsername(userInfo.getUsername());
		
		UserRoles roles=new UserRoles();
		roles.setRole("ROLE_CUSTOMER");
		roles.setUsername(userInfo.getUsername());
		
		return userInfoDAO.registerNewUserAccount(userInfo,account,pwdRecoveryQuestion,roles);
		
	}
	
	//return user with given username and identification no
	@Transactional
	public Userinfo getUserInfo(Userinfo userInfo)
	{   String i = (userInfoDAO.findUserByUsername(userInfo.getUsername())).getIdentificationid();
		if(i.equalsIgnoreCase(userInfo.getIdentificationid()))
		{
			Userinfo ui = userInfoDAO.findUserByUsername(userInfo.getUsername()); 
			return ui;
		}
		return null;
	}
	
	//return user with given username and identification no
	@Transactional
	public Userinfo getUserInfobyUserName(String username)
	{   
		Userinfo ui = userInfoDAO.findUserByUsername(username);
		if(ui != null)
		{ 
			return ui;
		}
		return null;
	}
	
	//update address or emailID of user with given values
	@Transactional
	public void updateUserInfo(Userinfo userInfo)
	{   
		userInfoDAO.updateUserInfo(userInfo);
	}
	
	//update address or emailID of user with given values
	@Transactional
	public void deleteUserInfo(Userinfo userInfo)
	{   
		userInfoDAO.deleteUserInfo(userInfo);
	}
}
=======
package com.group10.sparkysbank.service;

import java.util.LinkedHashSet;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.group10.sparkysbank.dao.UserInfoDAO;
import com.group10.sparkysbank.model.Pwdrecovery;
import com.group10.sparkysbank.model.Roles;
import com.group10.sparkysbank.model.UserRoles;
import com.group10.sparkysbank.model.Useraccounts;
import com.group10.sparkysbank.model.Userinfo;

@Service("userService")
public class UserService {

	@Autowired
	UserInfoDAO userInfoDAO;
	@Transactional
	public int addNewExternalUuser(Userinfo userInfo,String que1,String que2,String ans1,String ans2)
	{
		
		Useraccounts account=new Useraccounts();
		account.setBalance(500.0);
		account.setUsername(userInfo.getUsername());
		
		Pwdrecovery pwdRecoveryQuestion=new Pwdrecovery();
		pwdRecoveryQuestion.setAns1(ans1);
		pwdRecoveryQuestion.setAns2(ans2);
		pwdRecoveryQuestion.setQuestion1(que1);
		pwdRecoveryQuestion.setQuestion2(que2);
		pwdRecoveryQuestion.setUsername(userInfo.getUsername());
		
		UserRoles roles=new UserRoles();
		roles.setRole("ROLE_CUSTOMER");
		roles.setUsername(userInfo.getUsername());
		
		return userInfoDAO.registerNewUserAccount(userInfo,account,pwdRecoveryQuestion,roles);
		
	}
	
	//return user with given username and identification no
	@Transactional
	public Userinfo getUserInfo(Userinfo userInfo)
	{   String i = (userInfoDAO.findUserByUsername(userInfo.getUsername())).getIdentificationid();
		if(i.equalsIgnoreCase(userInfo.getIdentificationid()))
		{
			Userinfo ui = userInfoDAO.findUserByUsername(userInfo.getUsername()); 
			return ui;
		}
		return null;
	}
	
	//return user with given username and identification no
	@Transactional
	public Userinfo getUserInfobyUserName(String username)
	{   
		Userinfo ui = userInfoDAO.findUserByUsername(username);
		if(ui != null)
		{ 
			return ui;
		}
		return null;
	}
	
	//update address or emailID of user with given values
	@Transactional
	public void updateUserInfo(Userinfo userInfo)
	{   
		userInfoDAO.updateUserInfo(userInfo);
	}
	
	//update address or emailID of user with given values
	@Transactional
	public void deleteUserInfo(Userinfo userInfo)
	{   
		userInfoDAO.deleteUserInfo(userInfo);
	}
}
>>>>>>> ec2e64c830271107c30fd3060708b9b114b1159d
